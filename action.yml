#------------------------------------------------------------------------------
# written by: Lawrence McDaniel
#             https://lawrencemcdaniel.com
#
# see
#  - https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
#  - https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
#
#------------------------------------------------------------------------------
name: Open edX Tutor k8s build Micro Front-end (MFE) plugin
description: 'Use Tutor to build a Docker container for the Open edX Micro Front-end plugin, then upload to AWS ECR'
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  subdomain:
    description: 'www'
    required: true
  domain-name:
    description: 'example.com'
    required: true
  site-name:
    description: 'University of the Galaxy'
    required: true
  aws-ecr-repository:
    description: 'The name of the repository inside your AWS Elastic Container Registry (ECR) in which the newly created container will be uploaded and tagged. Defaults to "openedx_mfe"'
    required: false
    default: 'openedx_mfe'
outputs:
  docker-container-url:
    description: 'The URL of the AWS ECR Docker container that was created and uploaded'
    value: ${{ steps.docker-image.outputs.uri }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3.2.0

    - name: Set up Docker Buildx
      id: setup-docker
      uses: docker/setup-buildx-action@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.6.1

    # verify that the ECR repository exists. If not, then create it.
    - name: Create the AWS ECR repository
      id: create-repository
      uses: lpm0073/aws-ecr-create@v0.1.1
      with:
        aws-ecr-repository: ${{ inputs.aws-ecr-repository }}

    - name: Intialize environment variables
      id: init-env
      shell: bash
      run: |
        echo "AWS_ECR_REGISTRY_MFE=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "AWS_ECR_REPOSITORY_MFE=${{ inputs.aws-ecr-repository }}" >> $GITHUB_ENV
        echo "REPOSITORY_TAG_MFE=$TUTOR_VERSION-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

        echo "SUBDOMAIN=${{ inputs.subdomain }}" >> $GITHUB_ENV
        echo "DOMAIN_NAME=${{ inputs.domain-name }}" >> $GITHUB_ENV
        echo "SITE_NAME=${{ inputs.site-name }}" >> $GITHUB_ENV


    - name: Initialize Docker image URI
      id: init-docker-image
      shell: bash
      run: |
        echo "DOCKER_IMAGE_MFE=${AWS_ECR_REGISTRY_MFE}/${AWS_ECR_REPOSITORY_MFE}:${REPOSITORY_TAG_MFE}" >> $GITHUB_ENV

    # Note: This is scaffolding. This step initialize the tutor 'env' path, which you might need
    #       if for example, you need to add Python requirements to the image
    - name: Render Tutor Config
      id: tutor-config-save
      shell: bash
      run: tutor config save --set MFE_DOCKER_IMAGE=${DOCKER_IMAGE_MFE}

    # Note: This is scaffolding. Add environment initialization stuff to this step
    #       that requires that a.) tutor is installed, and b.) the tutor environment
    #       is initialized.
    #
    #       Example: to add requirements to a build: $(tutor config printroot)/env/build/mfe/requirements
    - name: Set Tutor-dependent environment variables
      id: tutor-environment-variables
      shell: bash
      run: |
        echo "scaffolding for Tutor-dependent environment variables"

    - name: Install plugin
      id: pip-install-plugin
      shell: bash
      run: |
        pip install tutor-mfe
        tutor plugins enable mfe
        tutor config save --set MFE_DOCKER_IMAGE=${AWS_ECR_REGISTRY_MFE}/${AWS_ECR_REPOSITORY_MFE}:${REPOSITORY_TAG_MFE} \
                          --set MFE_ACCESS_TOKEN_COOKIE_NAME='edx-jwt-cookie-header-payload' \
                          --set MFE_BASE_URL='https://apps.${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_CSRF_TOKEN_API_PATH='/csrf/api/v1/token' \
                          --set MFE_CREDENTIALS_BASE_URL='https://credentials.${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_DISCOVERY_API_BASE_URL='https://discovery.${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_ECOMMERCE_BASE_URL='https://ecommerce.${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_ENABLE_NEW_RELIC='false' \
                          --set MFE_FAVICON_URL='https://cdn.${SUBDOMAIN}.${DOMAIN_NAME}/favicon.ico' \
                          --set MFE_LANGUAGE_PREFERENCE_COOKIE_NAME='openedx-language-preference' \
                          --set MFE_LMS_BASE_URL='https://${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_LOGIN_URL='https://${SUBDOMAIN}.${DOMAIN_NAME}/login' \
                          --set MFE_LOGO_URL='https://cdn.${SUBDOMAIN}.${DOMAIN_NAME}/logo.png' \
                          --set MFE_LOGO_TRADEMARK_URL='https://cdn.${SUBDOMAIN}.${DOMAIN_NAME}/logo.png' \
                          --set MFE_LOGO_WHITE_URL='https://cdn.${SUBDOMAIN}.${DOMAIN_NAME}/logo.png' \
                          --set MFE_LOGOUT_URL='https://${SUBDOMAIN}.${DOMAIN_NAME}/logout' \
                          --set MFE_MARKETING_SITE_BASE_URL='https://${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_NODE_ENV=production \
                          --set MFE_PUBLISHER_BASE_URL='' \
                          --set MFE_REFRESH_ACCESS_TOKEN_ENDPOINT='https://${SUBDOMAIN}.${DOMAIN_NAME}/login_refresh' \
                          --set MFE_SEGMENT_KEY='' \
                          --set MFE_SITE_NAME='${SITE_NAME}' \
                          --set MFE_STUDIO_BASE_URL='https://studio.${SUBDOMAIN}.${DOMAIN_NAME}' \
                          --set MFE_USER_INFO_COOKIE_NAME='user-info' \

    - name: Build the image
      id: tutor-build-image
      shell: bash
      run: tutor images build mfe

    - name: Push the image
      id: docker-push-image
      shell: bash
      run: |
        tutor images push mfe
        docker tag ${AWS_ECR_REGISTRY_MFE}/${AWS_ECR_REPOSITORY_MFE}:${REPOSITORY_TAG_MFE} ${AWS_ECR_REGISTRY_MFE}/${AWS_ECR_REPOSITORY_MFE}:latest
        docker push ${AWS_ECR_REGISTRY_MFE}/${AWS_ECR_REPOSITORY_MFE}:latest

    - name: Docker image:tag
      id: docker-image
      shell: bash
      run: |
        echo "::set-output name=uri::$(echo $DOCKER_IMAGE_MFE)"
